# -*- coding: utf-8 -*-
"""exporters.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mgiCPWeh9yxe09QNeIY_QDEtRJBJHcgX
"""

# exporters.py
"""
Export helpers: save CSVs, save PNGs from arrays/plots, and produce a list of generated files.
Intended to be called by core.process_files or reporters.generate_pdf_report.
"""

import os
import io
import numpy as np
import pandas as pd
from PIL import Image
from matplotlib import pyplot as plt
from typing import List, Dict, Any

# small helpers reused here; you can also import from utils.file_utils if preferred
def safe_makedir(path: str):
    if not os.path.exists(path):
        os.makedirs(path, exist_ok=True)

def save_csv_from_spectrum(wl: np.ndarray, fl: np.ndarray, outpath: str) -> str:
    """Save simple 2-column CSV (wavelength, flux). Returns path."""
    try:
        df = pd.DataFrame({"wavelength": wl, "flux": fl})
        df.to_csv(outpath, index=False)
        return outpath
    except Exception as e:
        raise

def save_table_df(table_df: pd.DataFrame, outpath: str) -> str:
    """Save a DataFrame to CSV."""
    try:
        table_df.to_csv(outpath, index=False)
        return outpath
    except Exception as e:
        raise

def save_png_from_array(arr: np.ndarray, outpath: str, cmap: str = "gray") -> str:
    """Normalize a 2D array and save as PNG."""
    try:
        a = np.array(arr).astype(float)
        a = a - np.nanmin(a)
        if np.nanmax(a) > 0:
            a = a / np.nanmax(a)
        a8 = (a * 255).astype("uint8")
        # convert to RGB if grayscale
        if a8.ndim == 2:
            pil = Image.fromarray(a8)
            pil = pil.convert("L").convert("RGB")
        else:
            pil = Image.fromarray(a8)
        pil.save(outpath, format="PNG")
        return outpath
    except Exception as e:
        # fallback: create blank image and save
        try:
            img = Image.new("RGB", (256, 256), color=(0, 0, 0))
            img.save(outpath)
            return outpath
        except Exception:
            raise

def save_png_from_matplotlib_figure(fig: plt.Figure, outpath: str) -> str:
    """Save a Matplotlib figure object to PNG (outpath)."""
    try:
        fig.savefig(outpath, bbox_inches="tight")
        plt.close(fig)
        return outpath
    except Exception:
        # fallback via buffer
        buf = io.BytesIO()
        fig.savefig(buf, format="png", bbox_inches="tight")
        buf.seek(0)
        with open(outpath, "wb") as fh:
            fh.write(buf.read())
        plt.close(fig)
        return outpath

def export_entry_files(entry: Dict[str, Any], outdir: str) -> List[str]:
    """
    Export CSVs/PNGs for a single entry dict. Returns list of paths written.
    Expected entry keys: file, hdu_index, wl, fl, table (DataFrame or None), image_array (ndarray or None), plots (list of png paths)
    """
    safe_makedir(outdir)
    generated = []
    base = f"{entry.get('file','unknown')}_hdu{entry.get('hdu_index',0)}"
    try:
        # spectrum CSV
        if entry.get("wl") is not None and entry.get("fl") is not None:
            csv_path = os.path.join(outdir, f"{base}_spectrum.csv")
            save_csv_from_spectrum(entry["wl"], entry["fl"], csv_path)
            generated.append(csv_path)
    except Exception:
        pass

    try:
        # table CSV
        if entry.get("table") is not None:
            csv_path = os.path.join(outdir, f"{base}_table.csv")
            save_table_df(entry["table"], csv_path)
            generated.append(csv_path)
    except Exception:
        pass

    try:
        # image array PNG
        if entry.get("image_array") is not None:
            png_path = os.path.join(outdir, f"{base}_image.png")
            save_png_from_array(entry["image_array"], png_path)
            generated.append(png_path)
    except Exception:
        pass

    try:
        # if entry includes pre-saved plot paths (core may have saved them), copy to outdir
        plots = entry.get("plots", []) or []
        for p in plots:
            try:
                if os.path.exists(p):
                    dst = os.path.join(outdir, os.path.basename(p))
                    # copy binary
                    with open(p, "rb") as fr, open(dst, "wb") as fw:
                        fw.write(fr.read())
                    generated.append(dst)
            except Exception:
                pass
    except Exception:
        pass

    return generated

def export_all(entries: List[Dict[str, Any]], outdir: str) -> List[str]:
    """
    Export files for all entries, return the flattened list of generated file paths.
    """
    safe_makedir(outdir)
    all_generated = []
    for e in entries:
        try:
            gen = export_entry_files(e, outdir)
            all_generated.extend(gen)
        except Exception:
            # continue on failure for robustness
            continue
    return all_generated
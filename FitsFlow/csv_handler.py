# -*- coding: utf-8 -*-
"""csv_handler.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mgiCPWeh9yxe09QNeIY_QDEtRJBJHcgX
"""

# FitsFlow/csv_handler.py
"""
CSV ingestion for AstroFlow.
Converts uploaded CSVs into the same `results` entries used for FITS processing:
each entry: {
    "file": filename,
    "path": path (if saved) or None,
    "hdu_index": None,
    "header": {},
    "wl": np.array,
    "fl": np.array,
    "err": None,
    "orig_df": pandas.DataFrame (optional)
}
"""

import os
import tempfile
from typing import List, Dict, Any, Union
import numpy as np
import pandas as pd

from .fields import map_columns, detect_data_type

def ingest_csv_file(file_like: Union[str, bytes, "io.BytesIO"], filename: str = None) -> List[Dict[str, Any]]:
    """
    Accepts a path or file-like object (Streamlit uploaded file) and returns list of result dicts.
    If a path is given as string, it reads it directly.
    """
    # Read into pandas
    if isinstance(file_like, (str, os.PathLike)):
        df = pd.read_csv(file_like)
        saved_path = str(file_like)
    else:
        # file_like is a stream (BytesIO / UploadedFile)
        try:
            file_like.seek(0)
        except Exception:
            pass
        df = pd.read_csv(file_like)
        # persist temporary CSV for downstream exporting/reporting
        fd, tmp = tempfile.mkstemp(suffix="_astroflow.csv")
        os.close(fd)
        df.to_csv(tmp, index=False)
        saved_path = tmp

    if filename is None:
        filename = os.path.basename(saved_path)

    mapping = map_columns(df)
    dtype = detect_data_type(mapping)

    outputs = []

    if dtype == "spectrum":
        wl_col, fl_col = mapping["wavelength"], mapping["flux"]
        # try to coerce to numeric
        wl = pd.to_numeric(df[wl_col], errors="coerce").to_numpy(dtype=float)
        fl = pd.to_numeric(df[fl_col], errors="coerce").to_numpy(dtype=float)
        mask = np.isfinite(wl) & np.isfinite(fl)
        if np.any(mask):
            outputs.append({
                "file": filename,
                "path": saved_path,
                "hdu_index": None,
                "header": {"source": "csv"},
                "wl": wl[mask],
                "fl": fl[mask],
                "err": None,
                "orig_df": df
            })
    elif dtype == "map":
        # For maps, we return the table as-is (app can decide how to display)
        outputs.append({
            "file": filename,
            "path": saved_path,
            "hdu_index": None,
            "header": {"source": "csv", "type": "map"},
            "wl": None,
            "fl": None,
            "err": None,
            "orig_df": df
        })
    else:
        # Generic table: try to pick first two numeric columns
        nums = [c for c in df.columns if pd.api.types.is_numeric_dtype(df[c])]
        if len(nums) >= 2:
            wl = pd.to_numeric(df[nums[0]], errors="coerce").to_numpy(dtype=float)
            fl = pd.to_numeric(df[nums[1]], errors="coerce").to_numpy(dtype=float)
            mask = np.isfinite(wl) & np.isfinite(fl)
            if np.any(mask):
                outputs.append({
                    "file": filename,
                    "path": saved_path,
                    "hdu_index": None,
                    "header": {"source": "csv", "type": "autodetected_table", "cols": nums[:2]},
                    "wl": wl[mask],
                    "fl": fl[mask],
                    "err": None,
                    "orig_df": df
                })
        else:
            # Nothing numeric -> pass through as table only
            outputs.append({
                "file": filename,
                "path": saved_path,
                "hdu_index": None,
                "header": {"source": "csv", "type": "table_only"},
                "wl": None,
                "fl": None,
                "err": None,
                "orig_df": df
            })

    return outputs
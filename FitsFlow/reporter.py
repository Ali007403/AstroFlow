# -*- coding: utf-8 -*-
"""reporter.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mgiCPWeh9yxe09QNeIY_QDEtRJBJHcgX
"""

# reporters.py
"""
PDF report generator using ReportLab (platypus).
Creates a readable report with headings, embedded PNG plots/images (if available),
and small table snippets for spectrum/table HDUs.
"""

import os
import io
import math
from datetime import datetime
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image as RLImage, Table as RLTable, TableStyle, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
from reportlab.lib.pagesizes import A4, landscape
from reportlab.lib.units import cm
import pandas as pd
from .exporters import export_all, save_png_from_array

def _small_table_from_df(df: pd.DataFrame, maxrows: int = 6):
    """
    Converts first maxrows rows of df to a simple list-of-lists for ReportLab table.
    Returns (data, colwidths)
    """
    cols = list(df.columns.astype(str))
    rows = [cols]
    nrows = min(maxrows, len(df))
    for i in range(nrows):
        row = []
        for c in cols:
            v = df.iloc[i][c]
            # stringify safely
            try:
                vs = str(v)
            except Exception:
                vs = "-"
            row.append(vs)
        rows.append(row)
    # rough column widths (allow ReportLab to auto layout)
    colwidths = None
    return rows, colwidths

def generate_pdf_report(entries, out_path, title: str = "AstroFlow Analysis Report", author: str = "AstroFlow"):
    """
    entries: list of dicts from core.process_files
    out_path: full path to PDF to write
    The function will first ensure exporters export necessary PNG/CSV files into the same folder as the PDF.
    """
    # Use output directory next to the PDF to save auxiliary files
    outdir = os.path.dirname(out_path) or "."
    if not os.path.exists(outdir):
        os.makedirs(outdir, exist_ok=True)

    # Export associated files (PNGs, CSVs) into outdir for embedding
    generated = export_all(entries, outdir)

    # Begin building the PDF with ReportLab platypus
    doc = SimpleDocTemplate(out_path, pagesize=landscape(A4), rightMargin=2*cm, leftMargin=2*cm, topMargin=2*cm, bottomMargin=2*cm)
    styles = getSampleStyleSheet()
    story = []

    # Title
    title_style = styles["Title"]
    story.append(Paragraph(title, title_style))
    meta = f"Generated: {datetime.utcnow().strftime('%Y-%m-%d %H:%M UTC')} — Entries: {len(entries)}"
    story.append(Paragraph(meta, styles["Normal"]))
    story.append(Spacer(1, 12))

    # Per-entry sections
    for idx, e in enumerate(entries):
        file_label = e.get("file", "unknown")
        hdu_idx = e.get("hdu_index", 0)
        heading = f"{file_label} — HDU {hdu_idx}"
        story.append(Paragraph(heading, styles["Heading2"]))

        # Header excerpt
        hdr = e.get("header", {})
        if hdr:
            # show first few header key=val pairs
            excerpt_items = []
            count = 0
            for k in hdr:
                val = hdr[k]
                excerpt_items.append(f"{k}={val}")
                count += 1
                if count >= 6:
                    break
            hdr_text = ", ".join(excerpt_items)
            story.append(Paragraph(f"<b>Header excerpt:</b> {hdr_text}", styles["Normal"]))
            story.append(Spacer(1,6))

        # Embed any plot images that were exported (prefer *_spectrum.png or *_image.png)
        # Find matching exported files for this entry by name prefix
        prefix = f"{file_label}_hdu{hdu_idx}"
        entry_imgs = [p for p in generated if os.path.basename(p).startswith(prefix) and p.lower().endswith((".png", ".jpg", ".jpeg"))]
        # If no exported PNGs but entry has an image array, create one now
        if not entry_imgs and e.get("image_array") is not None:
            try:
                png_path = os.path.join(outdir, f"{prefix}_image.png")
                save_png_from_array(e["image_array"], png_path)
                entry_imgs.append(png_path)
                generated.append(png_path)
            except Exception:
                pass

        for im in entry_imgs[:3]:  # embed up to first 3 images to avoid huge PDFs
            try:
                # scale image to fit page width reasonably
                rlimg = RLImage(im)
                max_width = (landscape(A4)[0] - 4*cm) * 0.9
                if rlimg.drawWidth > max_width:
                    scale = max_width / rlimg.drawWidth
                    rlimg.drawWidth = rlimg.drawWidth * scale
                    rlimg.drawHeight = rlimg.drawHeight * scale
                story.append(rlimg)
                story.append(Spacer(1, 8))
            except Exception:
                continue

        # If spectrum exists, show a small table of first rows
        if e.get("wl") is not None and e.get("fl") is not None:
            try:
                import numpy as np
                df = pd.DataFrame({"wavelength": np.asarray(e["wl"]), "flux": np.asarray(e["fl"])})
                rows, _ = _small_table_from_df(df, maxrows=6)
                t = RLTable(rows, repeatRows=1)
                t.setStyle(TableStyle([
                    ("BACKGROUND", (0,0), (-1,0), colors.HexColor("#F0F0F0")),
                    ("GRID", (0,0), (-1,-1), 0.25, colors.grey),
                    ("FONT", (0,0), (-1,0), "Helvetica-Bold"),
                    ("ALIGN", (0,0), (-1,-1), "LEFT")
                ]))
                story.append(Paragraph("<b>Spectrum snippet (first rows)</b>", styles["Normal"]))
                story.append(t)
                story.append(Spacer(1,8))
            except Exception:
                pass

        # If a table DataFrame exists, show its header & first rows
        if e.get("table") is not None:
            try:
                df = e["table"]
                story.append(Paragraph("<b>Table preview</b>", styles["Normal"]))
                rows, _ = _small_table_from_df(df, maxrows=6)
                t = RLTable(rows, repeatRows=1)
                t.setStyle(TableStyle([
                    ("BACKGROUND", (0,0), (-1,0), colors.HexColor("#F0F0F0")),
                    ("GRID", (0,0), (-1,-1), 0.25, colors.grey),
                    ("FONT", (0,0), (-1,0), "Helvetica-Bold"),
                ]))
                story.append(t)
                story.append(Spacer(1,8))
            except Exception:
                pass

        # List exported files for this entry
        entry_gen = [os.path.basename(p) for p in generated if os.path.basename(p).startswith(prefix)]
        if entry_gen:
            story.append(Paragraph(f"<b>Exported files:</b> {', '.join(entry_gen)}", styles["Normal"]))
            story.append(Spacer(1, 8))

        # small page break between entries if PDF getting long
        if (idx + 1) % 3 == 0:
            story.append(PageBreak())

    # finalize PDF
    try:
        doc.build(story)
    except Exception as e:
        # try a simpler Canvas fallback if platypus build fails
        from reportlab.pdfgen import canvas
        c = canvas.Canvas(out_path, pagesize=landscape(A4))
        c.drawString(30, 520, "AstroFlow Report - fallback (platypus failed to build)")
        c.save()

    return out_path
# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mgiCPWeh9yxe09QNeIY_QDEtRJBJHcgX
"""

import streamlit as st
import tempfile
import os
import io
import contextlib
import glob
import matplotlib.pyplot as plt
import pandas as pd
from FitsFlow.core import analyze_all_fits

st.set_page_config(page_title="AstroFlow", layout="wide")

st.title("AstroFlow")
st.markdown("Upload FITS files to analyze spectra and biosignatures.")

# File upload
uploaded = st.file_uploader("Upload FITS files", type=["fits"], accept_multiple_files=True)
if not uploaded:
    st.info("Upload FITS files to begin.")
    st.stop()

# Save files to temp directory
work_dir = tempfile.mkdtemp(prefix="astroflow_")
file_paths = []
for up in uploaded:
    dst = os.path.join(work_dir, up.name)
    with open(dst, "wb") as f:
        f.write(up.read())
    file_paths.append(dst)
st.success(f"Saved {len(file_paths)} files: {[os.path.basename(p) for p in file_paths]}")

# Run core and capture outputs
def run_core_capture(temp_dir):
    result = {"prints": "", "figs": [], "files": [], "returns": None}
    before_files = set(os.listdir(temp_dir))
    pre_figs = set(plt.get_fignums())
    captured_figs = []
    orig_show = plt.show
    def fake_show(*a, **kw):
        try:
            fig = plt.gcf()
            captured_figs.append(fig)
            plt.close(fig)
        except:
            pass
    plt.show = fake_show
    stdout_buf = io.StringIO()
    orig_glob = glob.glob
    def patched_glob(pattern):
        if '/content/*.fits' in pattern:
            return [os.path.join(temp_dir, f) for f in os.listdir(temp_dir) if f.endswith('.fits')]
        return orig_glob(pattern)
    glob.glob = patched_glob
    
    try:
        with contextlib.redirect_stdout(stdout_buf):
            analyze_all_fits()
    except Exception as e:
        st.error(f"Error running analysis: {e}")
        result["prints"] = str(e)
    finally:
        plt.show = orig_show
        glob.glob = orig_glob
    
    result["prints"] = stdout_buf.getvalue()
    post_figs = set(plt.get_fignums())
    result["figs"] = captured_figs + [plt.figure(n) for n in (post_figs - pre_figs)]
    result["files"] = [os.path.join(temp_dir, f) for f in (set(os.listdir(temp_dir)) - before_files)]
    return result

# Run button
if st.button("Run Analysis"):
    with st.spinner("Running analysis..."):
        res = run_core_capture(work_dir)
    
    # Display logs
    if res["prints"].strip():
        st.subheader("Logs")
        st.code(res["prints"])
    
    # Display plots
    if res["figs"]:
        st.subheader("Plots")
        for i, fig in enumerate(res["figs"]):
            try:
                st.pyplot(fig, key=f"fig_{i}")
            except:
                buf = io.BytesIO()
                fig.savefig(buf, format='png', bbox_inches='tight')
                buf.seek(0)
                st.image(buf, caption=f"Plot {i}", use_column_width=True, key=f"fig_img_{i}")
    
    # Display generated files
    if res["files"]:
        st.subheader("Generated Files")
        for f in res["files"]:
            fname = os.path.basename(f)
            if fname.lower().endswith(".csv"):
                try:
                    df = pd.read_csv(f)
                    st.dataframe(df.head(200), key=f"csv_{fname}")
                    st.download_button(f"Download {fname}", open(f, "rb").read(), file_name=fname, key=f"dl_{fname}")
                except:
                    st.write(f"Failed to read {fname}")
            elif fname.lower().endswith((".png", ".jpg", ".jpeg")):
                st.image(f, caption=fname, use_column_width=True, key=f"img_{fname}")
                st.download_button(f"Download {fname}", open(f, "rb").read(), file_name=fname, key=f"dl_{fname}")
            else:
                st.download_button(f"Download {fname}", open(f, "rb").read(), file_name=fname, key=f"dl_{fname}")

# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mgiCPWeh9yxe09QNeIY_QDEtRJBJHcgX
"""

# app.py â€” runs fitsflow.core and captures everything it prints/plots/saves
import streamlit as st
import numpy as np
from astropy.io import fits
from scipy.signal import savgol_filter
import pandas as pd
import tempfile, os, io, time, re, sys
import matplotlib.pyplot as plt
import plotly.graph_objects as go
from typing import Tuple
import contextlib

st.set_page_config(page_title="AstroFlow Â· Core-invoker", layout="wide", initial_sidebar_state="expanded")

# -------------------------
# helpers
# -------------------------
def make_key(*parts):
    raw = "_".join(str(p) for p in parts if p is not None)
    key = re.sub(r'\W+', '_', raw).strip('_')
    return key[:180]

WL_COLS = ['WAVELENGTH','WAVE','LAMBDA','WLEN','LAMBDA_MICRON','LAMBDA_UM','WAVELENGTH_MICRON']
FLUX_COLS = ['FLUX','FLUX_DENSITY','SPECTRUM','INTENSITY','FLUX_1','FLUX_0']
DEFAULT_BANDS = {"H2O": (1.35,1.45),"CH4": (1.60,1.72),"CO2": (2.65,2.75)}

def safe_names(arr):
    try:
        return list(arr.names)
    except Exception:
        return []

def try_extract_spectrum(hdu):
    data = hdu.data
    if data is None:
        return None, None
    if hasattr(data,'names'):
        names = safe_names(data)
        wl_col = next((c for c in WL_COLS if c in names), None)
        fl_col = next((c for c in FLUX_COLS if c in names), None)
        if wl_col and fl_col:
            wl = np.array(data[wl_col]).astype(float).flatten()
            fl = np.array(data[fl_col]).astype(float).flatten()
            mask = np.isfinite(wl) & np.isfinite(fl)
            return wl[mask], fl[mask]
        # fallback:
        nums = [n for n in names if np.issubdtype(data[n].dtype, np.number)]
        if len(nums)>=2:
            wl = np.array(data[nums[0]]).astype(float).flatten()
            fl = np.array(data[nums[1]]).astype(float).flatten()
            mask = np.isfinite(wl)&np.isfinite(fl)
            return wl[mask], fl[mask]
    try:
        arr = np.array(data)
        if arr.ndim==1:
            wl = np.arange(arr.size)
            fl = arr.astype(float)
            mask = np.isfinite(fl)
            return wl[mask], fl[mask]
        elif arr.ndim==2:
            fl = np.nanmean(arr,axis=0)
            wl = np.arange(fl.size)
            mask = np.isfinite(fl)
            return wl[mask], fl[mask]
    except Exception:
        pass
    return None, None

def plot_matplotlib_figures(captured_figs):
    # show any matplotlib Figure objects
    for idx, fig in enumerate(captured_figs):
        try:
            st.pyplot(fig)
        except Exception:
            # final fallback: save to PNG and show
            buf = io.BytesIO()
            fig.savefig(buf, format='png', bbox_inches='tight')
            buf.seek(0)
            st.image(buf)

# -------------------------
# Try import user's core module
# -------------------------
core = None
core_import_msg = ""
try:
    import fitsflow.core as core
    core_import_msg = "Imported fitsflow.core successfully."
except Exception as e:
    core = None
    core_import_msg = f"fitsflow.core not importable: {e}"

# -------------------------
# Sidebar UI
# -------------------------
st.sidebar.header("AstroFlow Controls")
st.sidebar.write(core_import_msg)
smoothing_enabled = st.sidebar.checkbox("Enable smoothing (app-level)", value=True)
smoothing_window = st.sidebar.slider("Smoothing window (odd)", 5, 501, 51, step=2)
polyorder = st.sidebar.slider("SavGol polyorder", 1, 5, 3)
show_bands = st.sidebar.checkbox("Show molecular bands (H2O/CH4/CO2)", value=True)
show_snr = st.sidebar.checkbox("Show SNR (approx)", value=False)
enable_downloads = st.sidebar.checkbox("Enable downloads", value=True)
st.sidebar.caption("This UI will run your fitsflow.core code and capture outputs.")

# -------------------------
# Upload files
# -------------------------
st.title("ðŸ”­ AstroFlow â€” Run your core.py and capture ALL outputs")
st.markdown("Upload FITS files and use the 'Run core' buttons to execute your local `fitsflow/core.py` logic. The app will capture printed output, matplotlib figures (plt.show()), and any files your code saves in the working temp dir.")

uploaded = st.file_uploader("Upload FITS files (or CSV)", type=["fits","csv"], accept_multiple_files=True)
if not uploaded:
    st.info("Upload files to begin. The app will call functions in fitsflow.core if available.")
    st.stop()

# Save uploaded to a temp working directory we control
work_dir = tempfile.mkdtemp()
file_paths = []
for up in uploaded:
    dst = os.path.join(work_dir, up.name)
    with open(dst, "wb") as f:
        f.write(up.read())
    file_paths.append(dst)

st.success(f"Saved {len(file_paths)} file(s) to working dir: {work_dir}")

# Build quick per-file UI and attempt to extract HDU metadata (for transparency)
st.header("Files uploaded")
for p in file_paths:
    st.write("- " + os.path.basename(p))

# -------------------------
# Core-run helpers: capture stdout + plt.show()
# -------------------------
import matplotlib
from types import SimpleNamespace

def run_core_and_capture(file_paths_list):
    """
    Run fitsflow.core on the given paths (best-effort). Captures:
    - stdout printed text
    - matplotlib figures emitted via plt.show()
    - any newly created files in the work_dir (csv/png/etc)
    - return dict with keys: prints (str), figs (list of Figure), saved_files (list)
    """
    out = {"prints": "", "figs": [], "saved_files": []}
    # snapshot existing files in working dir
    before = set(os.listdir(work_dir))

    # capture stdout
    stdout_buf = io.StringIO()
    # capture matplotlib.show calls by monkeypatching plt.show
    captured_figs = []

    orig_show = plt.show
    def fake_show(*args, **kwargs):
        # grab current figure(s) and append copies
        fig = plt.gcf()
        try:
            # we copy the figure by saving to buffer and reloading to a new Figure if needed,
            # but simplest: append existing fig and then close it
            captured_figs.append(fig)
            plt.close(fig)
        except Exception:
            pass

    plt.show = fake_show

    try:
        with contextlib.redirect_stdout(stdout_buf):
            # Many variants of core exist â€” try common function names:
            # 1) analyze_all_fits(paths) or analyze_all_fits() â€” try to call with list first
            called = False
            if core is not None:
                # try analyze_all_fits
                if hasattr(core, "analyze_all_fits"):
                    try:
                        # first try passing paths
                        try:
                            core.analyze_all_fits(file_paths_list)
                        except TypeError:
                            # maybe expects no args
                            core.analyze_all_fits()
                        called = True
                    except Exception:
                        # swallow, we'll try other funcs
                        pass
                # try analyze_file or analyze_fits
                if not called and hasattr(core, "analyze_file"):
                    for fp in file_paths_list:
                        try:
                            core.analyze_file(fp)
                        except Exception:
                            pass
                    called = True
                if not called and hasattr(core, "process_file"):
                    for fp in file_paths_list:
                        try:
                            core.process_file(fp)
                        except Exception:
                            pass
                    called = True
                # as a last resort, try main() if present
                if not called and hasattr(core, "main"):
                    try:
                        core.main(file_paths_list)
                        called = True
                    except Exception:
                        try:
                            core.main()
                            called = True
                        except Exception:
                            pass
            else:
                print("No core module available to run.")
    except Exception as e:
        # capture exception text too
        print("ERROR while running core:", e)
    finally:
        # restore plt.show
        plt.show = orig_show

    out["prints"] = stdout_buf.getvalue()
    out["figs"] = captured_figs

    # find new files created in work_dir
    after = set(os.listdir(work_dir))
    new = sorted(list(after - before))
    out["saved_files"] = [os.path.join(work_dir, n) for n in new]
    return out

# -------------------------
# Per-file UI: run core or inspect per-HDU (both)
# -------------------------
st.header("Per-file: run your core or inspect HDUs")

for idx, fp in enumerate(file_paths):
    fname = os.path.basename(fp)
    st.subheader(fname)
    cols = st.columns([1,1,1,1])
    if core is None:
        cols[0].warning("fitsflow.core not importable â€” UI will still show tables/HDUs but cannot run core.")
    run_key = make_key("runcore", fname, idx)
    if cols[0].button("â–¶ Run core analysis (capture all outputs)", key=run_key):
        t0 = time.time()
        with st.spinner(f"Running core on {fname} ..."):
            res = run_core_and_capture([fp])
        t1 = time.time()
        st.success(f"Run finished in {t1-t0:.2f}s â€” captured outputs below.")

        # Show printed stdout
        if res["prints"].strip():
            st.subheader("Captured prints / logs")
            st.code(res["prints"])

        # Show any matplotlib figs captured
        if res["figs"]:
            st.subheader("Captured matplotlib figures")
            for i, fig in enumerate(res["figs"]):
                try:
                    st.pyplot(fig)
                except Exception:
                    buf = io.BytesIO()
                    fig.savefig(buf, format='png', bbox_inches='tight')
                    buf.seek(0)
                    st.image(buf, caption=f"Figure {i}")
            st.info(f"{len(res['figs'])} figure(s) captured from core.")

        # Show any files core wrote to working dir
        if res["saved_files"]:
            st.subheader("Files created by core")
            for fpath in res["saved_files"]:
                fname2 = os.path.basename(fpath)
                st.write("-", fname2)
                # show CSV tables inline
                if fname2.lower().endswith(".csv"):
                    try:
                        df = pd.read_csv(fpath)
                        st.dataframe(df.head(200))
                        if enable_downloads:
                            st.download_button(f"Download {fname2}", open(fpath,"rb").read(), file_name=fname2, key=make_key("dl", fname, fname2))
                    except Exception as e:
                        st.write("Could not parse CSV:", e)
                # show PNGs
                elif fname2.lower().endswith((".png",".jpg",".jpeg")):
                    st.image(open(fpath,"rb").read(), caption=fname2)
                    if enable_downloads:
                        st.download_button(f"Download {fname2}", open(fpath,"rb").read(), file_name=fname2, key=make_key("dl", fname, fname2))
                else:
                    # allow download of any created file
                    if enable_downloads:
                        st.download_button(f"Download {fname2}", open(fpath,"rb").read(), file_name=fname2, key=make_key("dl", fname, fname2))
        else:
            st.info("No files were created by core in the working directory.")

    # Offer per-file HDU inspection (transparency) â€” show headers/tables/images/1D spectra
    if st.checkbox("ðŸ”Ž Inspect HDUs (show tables/images/spectra)", key=make_key("inspect", fname, idx)):
        try:
            with fits.open(fp, memmap=False) as hdul:
                for h_i, hdu in enumerate(hdul):
                    st.markdown(f"**HDU {h_i}** â€” type: `{hdu.__class__.__name__}`")
                    # header snippet
                    hdr = dict(hdu.header)
                    st.write("Header keys (sample):")
                    st.json({k: hdr[k] for k in list(hdr.keys())[:20]})
                    # table
                    if hasattr(hdu.data, 'names'):
                        try:
                            df = pd.DataFrame(hdu.data)
                            st.write(f"Table (first 200 rows) â€” columns: {list(df.columns)[:6]}")
                            st.dataframe(df.head(200))
                            if enable_downloads:
                                st.download_button(f"Download {fname}_hdu{h_i}_table.csv", df.to_csv(index=False).encode('utf-8'), file_name=f"{fname}_hdu{h_i}_table.csv", key=make_key(fname,h_i,"table","dl"))
                        except Exception as e:
                            st.write("Could not show table:", e)
                    # image
                    try:
                        arr = hdu.data
                        if getattr(arr,"ndim",0)==2:
                            st.write("HDU is 2D â€” showing image preview:")
                            fig, ax = plt.subplots(figsize=(6,3))
                            ax.imshow(arr, origin='lower', cmap='gray', aspect='auto')
                            ax.set_title(f"{fname} HDU {h_i} image")
                            st.pyplot(fig)
                            if enable_downloads:
                                buf = io.BytesIO()
                                fig.savefig(buf, format='png', bbox_inches='tight')
                                buf.seek(0)
                                st.download_button(f"Download image PNG (HDU {h_i})", buf, file_name=f"{fname}_hdu{h_i}_image.png", key=make_key(fname,h_i,"image","dl"))
                    except Exception:
                        pass
                    # 1D spectrum
                    wl, fl = try_extract_spectrum(hdu)
                    if wl is not None:
                        st.write(f"1D spectrum: {len(wl)} points, range {wl.min():.4g}-{wl.max():.4g}")
                        df_sp = pd.DataFrame({"wavelength": wl, "flux": fl})
                        st.dataframe(df_sp.head(200))
                        # plot via matplotlib and show
                        fig2, ax2 = plt.subplots(figsize=(8,3))
                        ax2.plot(wl, fl, lw=0.9)
                        ax2.set_xlabel("Wavelength")
                        ax2.set_ylabel("Flux")
                        ax2.grid(True)
                        st.pyplot(fig2)
                        if enable_downloads:
                            st.download_button(f"Download spectrum CSV (HDU {h_i})", df_sp.to_csv(index=False).encode('utf-8'), file_name=f"{fname}_hdu{h_i}_spectrum.csv", key=make_key(fname,h_i,"spectrum","dl"))
        except Exception as e:
            st.error(f"Failed to inspect HDUs: {e}")

st.info("Tip: Use the 'Run core analysis' button per file to capture everything your core.py prints or plots. If your core saves outputs, they'll appear under 'Files created by core'.")


# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mgiCPWeh9yxe09QNeIY_QDEtRJBJHcgX
"""

import numpy as np
from astropy.io import fits
from scipy.signal import savgol_filter
import matplotlib.pyplot as plt

# Common column names for auto-detection
WL_COLS = ['WAVELENGTH', 'WAVE', 'LAMBDA', 'WLEN']
FLUX_COLS = ['FLUX', 'FLUX_DENSITY', 'SPECTRUM', 'INTENSITY']

def analyze_all_fits(file_paths):
    """Analyze all FITS files: print structure, extract data, plot everything."""
    print(f"Detected {len(file_paths)} FITS files: {file_paths}")
    if not file_paths:
        print("No FITS files provided.")
        return None
    
    wavelengths_all, fluxes_all, headers = [], [], []
    
    for file_path in file_paths:
        print(f"\n--- Analyzing {file_path} ---")
        try:
            with fits.open(file_path) as hdul:
                hdul.info()  # Print HDU structure
                found_data = False
                
                for idx, hdu in enumerate(hdul):
                    print(f"HDU {idx}: Type={hdu.header.get('XTENSION', 'PRIMARY')}, Shape={hdu.data.shape if hdu.data is not None else 'None'}")
                    
                    if hdu.data is None:
                        print("  No data in this HDU.")
                        continue
                    
                    if hasattr(hdu.data, 'names'):  # Table HDU
                        print(f"  Table columns: {list(hdu.data.names)}")
                        wl_col = next((col for col in WL_COLS if col in hdu.data.names), None)
                        flux_col = next((col for col in FLUX_COLS if col in hdu.data.names), None)
                        
                        if wl_col and flux_col:
                            wl = np.array(hdu.data[wl_col]).flatten()
                            fl = np.array(hdu.data[flux_col]).flatten()
                            mask_valid = np.isfinite(wl) & np.isfinite(fl)
                            if np.any(mask_valid):
                                wl_valid, fl_valid = wl[mask_valid], fl[mask_valid]
                                wavelengths_all.append(wl_valid)
                                fluxes_all.append(fl_valid)
                                headers.append(hdu.header)
                                found_data = True
                                print(f"  Extracted {len(wl_valid)} valid points from '{wl_col}' vs '{flux_col}'")
                                # Quick plot for this data
                                plt.figure(figsize=(10, 6))
                                plt.plot(wl_valid, fl_valid, label=f"{wl_col} vs {flux_col}")
                                plt.title(f"{file_path} HDU {idx} Spectrum")
                                plt.xlabel(wl_col)
                                plt.ylabel(flux_col)
                                plt.legend()
                                plt.grid(True)
                                plt.show()
                        else:
                            print("  No wl/flux columns; plotting first 3 columns.")
                            if hdu.data.names:
                                plt.figure(figsize=(10, 6))
                                for col in hdu.data.names[:3]:
                                    plt.plot(hdu.data[col], label=col)
                                plt.title(f"{file_path} HDU {idx} Columns")
                                plt.legend()
                                plt.show()
                    else:  # Image HDU
                        data = hdu.data
                        print(f"  Image data shape: {data.shape}")
                        if data.ndim == 1:
                            plt.figure(figsize=(10, 6))
                            plt.plot(data, label='1D Data')
                            plt.title(f"{file_path} HDU {idx} 1D Image")
                            plt.legend()
                            plt.show()
                        elif data.ndim == 2:
                            plt.figure(figsize=(10, 6))
                            plt.imshow(data, cmap='gray', aspect='auto')
                            plt.title(f"{file_path} HDU {idx} 2D Image")
                            plt.colorbar()
                            plt.show()
                        found_data = True
                
                if not found_data:
                    print(f"  No plottable data in {file_path}")
        
        except Exception as e:
            print(f"Error processing {file_path}: {e}")
    
    if wavelengths_all:
        print(f"\nFound wl/flux in {len(wavelengths_all)} datasets; stacking...")
        # Original functionality: stack, smooth, biosignatures, SNR
        min_wl = min(min(wl) for wl in wavelengths_all)
        max_wl = max(max(wl) for wl in wavelengths_all)
        ref_wl = np.linspace(min_wl, max_wl, 2000)
        interpolated_fluxes = [np.interp(ref_wl, wl, fl) for wl, fl in zip(wavelengths_all, fluxes_all)]
        stacked_flux = np.nanmean(interpolated_fluxes, axis=0)
        flux_norm = (stacked_flux - np.nanmin(stacked_flux)) / (np.nanmax(stacked_flux) - np.nanmin(stacked_flux))
        stacked_smoothed = savgol_filter(flux_norm, 51, 3)
        
        # Biosignature simulation
        def gaussian(x, mu, sigma, amp):
            return -amp * np.exp(-0.5 * ((x - mu) / sigma) ** 2)
        bio_curves = {
            'Hâ‚‚O': gaussian(ref_wl, 1.4, 0.05, 0.01),
            'CHâ‚„': gaussian(ref_wl, 1.66, 0.06, 0.008),
            'COâ‚‚': gaussian(ref_wl, 2.7, 0.05, 0.007),
            'DMS': gaussian(ref_wl, 3.8, 0.02, 0.001),
            'CO':  gaussian(ref_wl, 4.7, 0.07, 0.006)
        }
        combined = 1 + sum(bio_curves.values())
        
        # Plot stacked spectrum vs biosignatures
        plt.figure(figsize=(14, 6))
        plt.plot(ref_wl, stacked_smoothed, label='Stacked Smoothed Spectrum', color='black', linewidth=1.5)
        plt.plot(ref_wl, combined, label='Simulated Biosignatures', linestyle='--', color='tomato')
        colors = ['skyblue', 'violet', 'lightgreen', 'gold', 'lightcoral']
        bands = [(1.35, 1.45), (1.60, 1.72), (2.65, 2.75), (3.75, 3.85), (4.65, 4.75)]
        for i, (start, end) in enumerate(bands):
            plt.axvspan(start, end, color=colors[i], alpha=0.25, label=list(bio_curves.keys())[i])
        plt.title("Stacked Spectrum vs Biosignatures")
        plt.xlabel("Wavelength (Âµm)")
        plt.ylabel("Normalized Flux")
        plt.grid(True)
        plt.legend()
        plt.tight_layout()
        plt.show()
        
        # SNR calculation
        def calc_snr(wl_range):
            mask = (ref_wl >= wl_range[0]) & (ref_wl <= wl_range[1])
            signal = 1 - np.mean(stacked_smoothed[mask]) if np.any(mask) else 0
            noise_mask = (((ref_wl >= wl_range[0] - 0.3) & (ref_wl <= wl_range[0] - 0.1)) |
                          ((ref_wl >= wl_range[1] + 0.1) & (ref_wl <= wl_range[1] + 0.3)))
            noise = np.std(stacked_smoothed[noise_mask]) if np.any(noise_mask) else 1e-10
            return signal / noise if noise > 0 else 0
        
        print("\nðŸ“Š SNR for Biosignature Bands:")
        total_score = 0
        snr_results = {}
        for molecule, rng in {'Hâ‚‚O': (1.35, 1.45), 'CHâ‚„': (1.60, 1.72), 'COâ‚‚': (2.65, 2.75), 'DMS': (3.75, 3.85), 'CO': (4.65, 4.75)}.items():
            snr = calc_snr(rng)
            snr_results[molecule] = snr
            print(f"{molecule}: SNR = {snr:.2f}Ïƒ")
            total_score += snr
        print(f"Combined Ïƒ: ~{total_score:.2f}Ïƒ")
        
        return smoothed, ref_wl, np.isfinite(smoothed), combined, bio_curves, snr_results
    else:
        print("No wavelength/flux data found; only images/tables plotted.")
        return None
